<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on gbrls - Gabriel Schneider&#39;s website</title>
    <link>https://gbrls.github.io/posts/</link>
    <description>Recent content in Posts on gbrls - Gabriel Schneider&#39;s website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Feb 2021 20:22:52 -0300</lastBuildDate>
    
	<atom:link href="https://gbrls.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binary Binary Tree</title>
      <link>https://gbrls.github.io/posts/binbin-tree/</link>
      <pubDate>Tue, 23 Feb 2021 20:22:52 -0300</pubDate>
      
      <guid>https://gbrls.github.io/posts/binbin-tree/</guid>
      <description>The trick I really like tricks with binary numbers. This one I was using to test digital systems.
 So, were does this come from? Is this generated by some slow recursive algorithm?
No!
This complete binary tree is generated by this code:
 if (col &amp;amp; (1 &amp;lt;&amp;lt; line)) != 0 { *pixel = c[line % c.len()]; }  How it works So, how does this work?</description>
    </item>
    
  </channel>
</rss>